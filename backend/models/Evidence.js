/**
 * Evidence Model - AEGIS Phase 1
 * 
 * MongoDB model for storing encrypted evidence files and metadata.
 * Follows zero-knowledge architecture - stores only encrypted data.
 */

const mongoose = require('mongoose');

const FileSchema = new mongoose.Schema({
  fileName: {
    type: String,
    required: true,
    maxlength: 255
  },
  fileType: {
    type: String,
    required: true,
    maxlength: 100
  },
  fileSize: {
    type: Number,
    required: true,
    min: 0,
    max: 16 * 1024 * 1024 // 16MB limit for MongoDB
  },
  encryptedData: {
    type: String,
    required: true
    // This stores the base64 encoded encrypted file data
  },
  isDescription: {
    type: Boolean,
    default: false
    // Flag to identify description text files
  },
  timestamp: {
    type: Date,
    default: Date.now
  }
});

const EvidenceSchema = new mongoose.Schema({
  evidenceId: {
    type: String,
    required: false, // Will be generated by pre-save hook
    unique: true,
    index: true
  },
  walletAddress: {
    type: String,
    required: true,
    lowercase: true,
    index: true,
    match: /^0x[a-fA-F0-9]{40}$/
  },
  files: [FileSchema],
  coverImage: {
    fileName: String,
    fileType: String,
    fileSize: Number,
    // Cover image for steganography (optional)
  },
  steganographyEnabled: {
    type: Boolean,
    default: false
  },
  uploadedAt: {
    type: Date,
    default: Date.now,
    index: true
  },
  isDeleted: {
    type: Boolean,
    default: false
  },
  metadata: {
    totalFiles: {
      type: Number,
      default: 0
    },
    totalSize: {
      type: Number,
      default: 0
    },
    encrypted: {
      type: Boolean,
      default: true
    }
  }
}, {
  timestamps: true
});

// Indexes for performance
EvidenceSchema.index({ walletAddress: 1, uploadedAt: -1 });
EvidenceSchema.index({ evidenceId: 1 });
EvidenceSchema.index({ isDeleted: 1 });

// Static methods
EvidenceSchema.statics.findByWallet = function(walletAddress) {
  return this.find({ 
    walletAddress: walletAddress.toLowerCase(),
    isDeleted: false 
  }).sort({ uploadedAt: -1 });
};

EvidenceSchema.statics.findByEvidenceId = function(evidenceId) {
  return this.findOne({ 
    evidenceId: evidenceId,
    isDeleted: false 
  });
};

EvidenceSchema.statics.getSecurityStats = async function() {
  const stats = await this.aggregate([
    {
      $match: { isDeleted: false }
    },
    {
      $group: {
        _id: null,
        totalEvidence: { $sum: 1 },
        totalFiles: { $sum: '$metadata.totalFiles' },
        totalSizeBytes: { $sum: '$metadata.totalSize' },
        steganographyCount: {
          $sum: { $cond: ['$steganographyEnabled', 1, 0] }
        },
        uniqueUsers: { $addToSet: '$walletAddress' }
      }
    },
    {
      $project: {
        _id: 0,
        totalEvidence: 1,
        totalFiles: 1,
        totalSizeBytes: 1,
        steganographyCount: 1,
        uniqueUsers: { $size: '$uniqueUsers' },
        timestamp: new Date()
      }
    }
  ]);
  
  return stats[0] || {
    totalEvidence: 0,
    totalFiles: 0,
    totalSizeBytes: 0,
    steganographyCount: 0,
    uniqueUsers: 0,
    timestamp: new Date()
  };
};

// Instance methods
EvidenceSchema.methods.markAsDeleted = function() {
  this.isDeleted = true;
  return this.save();
};

EvidenceSchema.methods.updateMetadata = function() {
  this.metadata.totalFiles = this.files.length;
  this.metadata.totalSize = this.files.reduce((sum, file) => sum + file.fileSize, 0);
  return this;
};

// Pre-save middleware
EvidenceSchema.pre('save', function(next) {
  // Auto-update metadata before saving
  this.updateMetadata();
  
  // Generate evidenceId if not exists
  if (!this.evidenceId) {
    this.evidenceId = `evidence_${this.walletAddress.slice(2, 10)}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
  }
  
  next();
});

// Security middleware - ensure sensitive data isn't exposed
EvidenceSchema.methods.toSecureJSON = function() {
  const obj = this.toObject();
  
  // Remove encrypted data from response for list views
  if (obj.files) {
    obj.files = obj.files.map(file => ({
      fileName: file.fileName,
      fileType: file.fileType,
      fileSize: file.fileSize,
      timestamp: file.timestamp,
      // encryptedData is excluded for security
    }));
  }
  
  return obj;
};

const Evidence = mongoose.model('Evidence', EvidenceSchema);

module.exports = Evidence;